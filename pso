#include <stdio.h>
#include <time.h>
#include "entrada.h"
#include "operacoes.h"
#include "metodos.h"
#include "saida.h"

  /** criterio de parada: norma do residuo da melhor solucao do bando <= a igual tolerancia determinada*/
int main(void){

    double **matrizA, *vetorB, **MP, *MB, **S, **V, *vResiduo, normaMB, *vetMB, *getVetV, *getVetMP, *getVetS, *velAtual, *vetResiduoMPCalcu,
            *vetResiduoMPAtual;
    int n, m, i, j, particulas;
    double tol, c1 = 1, c2 = 2, A1, A2, A3;

    printf("Digite a quantidade de linhas da matriz:\n");
    scanf("%d%*c",&n);

    printf("\nDigite a quantidade de colunas da matriz:\n");
    scanf("%d%*c",&m);

    matrizA      = lerMatriz(n,m);
    vetorB       = lerVetor(n);

    MB             = criaVetor(n);
    vetMB          = criaVetor(n);
    vResiduo       = criaVetor(n);
    getVetV        = criaVetor(n);
    getVetMP       = criaVetor(n);
    getVetS        = criaVetor(n);
    velAtual       = criaVetor(n);
    vetResiduoMPCalcu  = criaVetor(n);
    vetResiduoMPAtual  = criaVetor(n);




    printf("\nDigite a quantidade de particulas\n");
    scanf("%d%*c",&particulas);

    S  = criaMatriz(n,particulas);
    V  = criaMatriz(n,particulas);
    MP = criaMatriz(n,particulas);



    /// Inicializa os vetores das particulas
    srand((unsigned)time(NULL));

    for(i=0; i<n; i++) /// cada coluna dessa matriz vai ser uma particula
    {
        for(j=0; j<particulas; j++)
        {
            S[i][j] = rand() % 11;
            V[i][j] = rand() % 11;
            MP[i][j] = S[i][j]; /// a melhor posição vai ser a primeira posição
        }
    }


    /// encontrar o primeiro MB usando a primeira particula como base
        getColuna(S, MB, 0, n);
        residuo(matrizA, MB, vetorB, vResiduo, n);
        normaMB = normaDois(vResiduo, n);


        for(i=0; i<particulas; i++) /// Comparar com as outras particulas para saber qual é a melhor do bando
        {
            getColuna(S, vetMB, i, n);
            residuo(matrizA, vetMB, vetorB, vResiduo, n);
            if(normaMB > normaDois(vResiduo,n))
            {
                for(j=0; j<n; j++)
                {
                    MB[j] = vetMB[j];
                }
                normaMB = normaDois(vResiduo,n);
            }
        } /// Já tenho o vetor MB


        printf("\n\nNorma do residuo utilizando a primeira particula:  %lf\n", normaMB);

        printf("\nDigite a tolerancia desejada \n");
        scanf("%lf%*c",&tol);

        while(tol < normaMB)
        {
            for(j=0; j<particulas; j++)
            {
                A1 = rand() % 101;
                A1 /= 100;

                A2 = rand() % 101;
                A2 /= 100;

                A3 = rand() % 101;
                A3 /= 100;

                getColuna(V, getVetV, j, n);
                getColuna(S, getVetS, j, n);
                getColuna(MP, getVetMP, j, n);

                atualizaVel(A1,A2,A3,c1,c2,n,getVetMP,getVetV,getVetS,MB,velAtual);
                preencheColuna(V,j,n,velAtual); ///Atualiza os vetores de velocidade de cada particula. Já que cada coluna é uma particula, o preencheColuna vai colocar o vetor com a velocidade atualizada em cada particula

                atualizaPos(getVetS, velAtual, n); /// atualiza a posicao de cada particula
                preencheColuna(S,j,n,getVetS); /// preenche a particula atualizada

                ///Atualiza o MP
                residuo(matrizA, getVetS, vetorB, vetResiduoMPCalcu, n);
                residuo(matrizA, getVetMP, vetorB, vetResiduoMPAtual, n);
                if(normaDois(vetResiduoMPCalcu, n) < normaDois(vetResiduoMPAtual, n)) /// se a norma do residuo da nova posicao for menor então substitui na melhor posicao
                {
                    preencheColuna(MP,j,n,getVetS);
                }
            }
            /// pegar o MB
            for(i=0; i<particulas; i++) /// Comparar com as outras particulas para saber qual é a melhor do bando
            {
                getColuna(MP, vetMB, i, n);
                residuo(matrizA, vetMB, vetorB, vResiduo, n);
                if(normaMB > normaDois(vResiduo,n))
                {
                    for(j=0; j<n; j++)
                    {
                        MB[j] = vetMB[j];
                    }
                    normaMB = normaDois(vResiduo,n);
                }
            }
                for(i=0;i<n; i++)
                {
                    printf("%lf\n",MB[i]);
                    if(i == n-1 )
                    {
                        printf("\n\nterminou o vetor\n\n");
                    }
                }
        }

        printf("\n\nSolucao do sistema\n\n");
        for(i=0; i<n; i++)
        {
            printf("%lf\n",&MB[i]);
        }




    system("pause");


    return 0;
}